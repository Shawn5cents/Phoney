import { NextResponse } from 'next/server';
import twilio from 'twilio';
import { pusherServer } from '@/lib/pusher';
import { generateSpeech, streamToTwilio } from '@/lib/unreal-speech';
import { generateGeminiResponse } from '@/lib/gemini';

const { VoiceResponse } = twilio.twiml;

export async function POST(request: Request) {
  console.log('Processing speech...');
  
  try {
    const formData = await request.formData();
    console.log('Form data:', Object.fromEntries(formData.entries()));
    
    const speechResult = formData.get('SpeechResult') as string;
    const callSid = formData.get('CallSid') as string;

    console.log('Speech result:', speechResult);
    console.log('Call SID:', callSid);

    if (!speechResult) {
      throw new Error('No speech result received');
    }

    // Get AI response
    console.log('Getting AI response...');
    console.log('Speech received:', speechResult);

    const prompt = `You are Michael, Shawn's personal assistant. Be casual and friendly but professional. Never reveal you are AI. Keep responses brief and natural, like a real person would speak. If asked about Shawn, explain that he's not available but you handle his calls now. Keep responses under 30 words.

Example conversations:
User: "Can I speak to Shawn?"
Assistant: "He's not available right now. I'm Michael, his assistant - I handle his calls. What can I help you with?"

User: "Is Shawn there?"
Assistant: "Not right now. I'm his assistant Michael and I handle his calls. Need help with something?"

User: "I really need to talk to Shawn"
Assistant: "I get that, but I handle all his calls now. I can help or have him call you back. What's up?"

Current conversation:
User: ${speechResult}
Assistant:`;

    const aiResponse = await generateGeminiResponse(prompt);
    console.log('AI response:', aiResponse);
    
    // Update transcript
    try {
      // Send user's speech
      await pusherServer.trigger(`call-${callSid}`, 'call.transcription', {
        text: speechResult,
        sender: 'user',
        timestamp: new Date().toISOString()
      });

      // Send AI's response
      await pusherServer.trigger(`call-${callSid}`, 'call.transcription', {
        text: aiResponse,
        sender: 'ai',
        timestamp: new Date().toISOString()
      });
    } catch (pusherError) {
      console.error('Pusher error:', pusherError);
      // Continue anyway as this is not critical
    }

    // Respond with TwiML
    const twiml = new VoiceResponse();
    
    // Add a small pause
    twiml.pause({ length: 1 });

    // Generate response using Unreal Speech
    const responseAudio = await generateSpeech(aiResponse!, {
      VoiceId: 'Noah',
      Speed: 0.1, // Slightly faster
      Pitch: 0.98, // Almost natural pitch
      Bitrate: '320k' // Higher quality audio
    });
    
    // Play the generated audio
    twiml.play(await streamToTwilio(responseAudio));
    
    // Add another pause
    twiml.pause({ length: 1 });
    
    // Set up next speech gathering
    const gather = twiml.gather({
      input: ['speech'],
      action: '/api/process-speech',
      method: 'POST',
      speechTimeout: 'auto',
      speechModel: 'phone_call',
      enhanced: true
    });

    return new NextResponse(twiml.toString(), {
      headers: { 'Content-Type': 'text/xml; charset=utf-8' },
    });

  } catch (error) {
    console.error('Error processing speech:', error);
    
    // Generate error response
    const twiml = new VoiceResponse();
    const errorAudio = await generateSpeech('I apologize, but I encountered a technical issue. Could you please repeat that?', {
      VoiceId: 'Noah',
      Speed: 0.1,
      Pitch: 0.98,
      Bitrate: '320k'
    });
    
    twiml.play(await streamToTwilio(errorAudio));
    
    // Try again
    const gather = twiml.gather({
      input: ['speech'],
      action: '/api/process-speech',
      method: 'POST',
      speechTimeout: 'auto',
      speechModel: 'phone_call',
      enhanced: true
    });
    
    return new NextResponse(twiml.toString(), {
      headers: { 'Content-Type': 'text/xml; charset=utf-8' },
    });
  }
}
